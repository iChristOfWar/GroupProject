using System;

public class Order
{
    // Properties
    public string OrderId { get; set; }
    public string CustomerId { get; set; }
    public DateTime OrderDate { get; set; }
    public DateTime? ShippingDate { get; set; } // Nullable in case shipping hasn't occurred yet
    public double TotalAmount { get; set; }
    public string OrderStatus { get; set; }

    // Constructor
    public Order(string orderId, string customerId, DateTime orderDate, DateTime? shippingDate, double totalAmount, string orderStatus)
    {
        OrderId = orderId;
        CustomerId = customerId;
        OrderDate = orderDate;
        ShippingDate = shippingDate;
        TotalAmount = totalAmount;
        OrderStatus = orderStatus;
    }

    // Method to display order details
    public void PrintOrderDetails()
    {
        Console.WriteLine($"Order ID: {OrderId}");
        Console.WriteLine($"Customer ID: {CustomerId}");
        Console.WriteLine($"Order Date: {OrderDate}");
        Console.WriteLine($"Shipping Date: {(ShippingDate.HasValue ? ShippingDate.Value.ToString() : "Not shipped yet")}");
        Console.WriteLine($"Total Amount: {TotalAmount:C}");
        Console.WriteLine($"Order Status: {OrderStatus}");
    }
}

public class Program
{
    // Main method
    public static void Main(string[] args)
    {
        // Create an order
        Order order = new Order(
            "ORD12345",
            "CUST67890",
            DateTime.Now,
            null, // Shipping date is null since it hasn't shipped
            199.99,
            "Pending"
        );

        // Display the order details
        order.PrintOrderDetails();
    }
}


